// TinyMCE 8 Attach File Plugin
(function () {
  'use strict';

  const pluginName = 'attach';

  tinymce.PluginManager.add(pluginName, function (editor, url) {
    
    // Register the toolbar button
    editor.ui.registry.addIcon('attach', '<svg fill="#000000" width="24" height="24" viewBox="-2 -2 26 26" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M13.3431459,6.54359691 L14.7681505,7.94693643 L8.44995122,14.362673 C8.13291462,14.6862631 8.13291462,15.2070402 8.44995122,15.5306303 C8.75079611,15.8376941 9.25336598,15.8362945 9.55100179,15.5289435 L16.5023994,8.46733202 C17.5172108,7.43170369 17.5172108,5.76848743 16.5023994,4.7328591 C15.5341634,3.74476165 13.820975,3.76674125 12.8720473,4.73474171 L5.2847529,12.4369015 C3.57174903,14.1843246 3.57174903,16.9902835 5.2847529,18.7377066 C6.94816131,20.4345378 9.80565005,20.4069016 11.4430826,18.7361401 L20.2920826,9.74890528 L21.7172138,11.1521162 L12.8698434,20.1376921 C10.4559333,22.6007416 6.31029227,22.6408362 3.85654347,20.1377844 C1.38115218,17.6126553 1.38115218,13.5619528 3.85824902,11.0350881 L11.4455397,3.33293215 C13.1689626,1.57486193 16.170293,1.53635593 17.930897,3.33307535 C19.7077116,5.14633788 19.7077116,8.05385323 17.9292946,9.86874731 L10.9820731,16.9260714 C9.90740151,18.0359992 8.10955314,18.041006 7.02134515,16.9303034 C5.94244998,15.8291061 5.94244998,14.0641972 7.02314587,12.9611667 L13.3431459,6.54359691 Z"/></svg>');
    editor.ui.registry.addToggleButton('attach', {
      icon: 'attach',
      tooltip: 'Attach File',
      onAction: function () {
        openAttachFileDialog();
      },
      onSetup: function (api) {
        function updateState() {
          const node = editor.selection.getNode();
          const isAttachLink =
            node.nodeName === 'A' && node.classList.contains('attach');
          api.setActive(isAttachLink);
        }
        editor.on('NodeChange', updateState);
        return function () {
          editor.off('NodeChange', updateState);
        };
      }
    });

    // Register menu item
    editor.ui.registry.addMenuItem('attach', {
      icon: 'attach',
      text: 'Attach File',
      onAction: function () {
        openAttachFileDialog();
      }
    });

    // Helper function to insert file link
    function insertFileLink(url, description) {
      const node = editor.selection.getNode();
      if (node.nodeName === 'A' && node.classList.contains('attach')) {
        editor.dom.setAttrib(node, 'href', url);
        node.textContent = description;
        editor.nodeChanged();
      } else {
        const linkHtml = `<a href="${url}" target="_blank" class="attach" rel="noopener">${description}</a>`;
        editor.insertContent(linkHtml);
      }
    }

    // Helper function to upload file using TinyMCE's ImageUploader
    function uploadFile(file, dialogApi) {
      // Create a blob info object similar to what TinyMCE uses for images
      const blobInfo = {
        id: () => 'file_' + new Date().getTime(),
        name: () => file.name,
        filename: () => file.name,
        blob: () => file,
        base64: () => new Promise((resolve) => {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result.split(',')[1]);
          reader.readAsDataURL(file);
        }),
        blobUri: () => URL.createObjectURL(file),
        uri: undefined
      };
      
      const uploadHandler = editor.getParam('images_upload_handler');
      if (uploadHandler && typeof uploadHandler === 'function') {
        document.getElementById('attach-upload-note').style.display = 'block';
        const progressEl = document.getElementById('attach-upload-progress');
        uploadHandler(
          blobInfo,
          (prog) => progressEl.value = .90*prog,
          true
        ).then((url) => {
            dialogApi.setData({source: {value:url}});
            dialogApi.showTab("general");
        }).catch((err) => {
            editor.windowManager.alert('Upload failed: ' + (err || 'Unknown error'));
            document.getElementById('attach-upload-note').style.display = 'none';
        });
        
        return;
      }
      editor.windowManager.alert('images_upload_handler required for attach');
    }

    // Main dialog function
    function openAttachFileDialog() {
      const node = editor.selection.getNode();
      let initialsource = '';
      let initialdescription = '';
      if (node.nodeName === 'A' && node.classList.contains('attach')) {
        initialsource = node.getAttribute('href');
        initialdescription = node.textContent;
      }
      const dialogConfig = {
        title: 'Attach File',
        size: 'normal',
        body: {
          type: 'tabpanel',
          tabs: [
            // General Tab
            {
              name: 'general',
              title: 'General',
              items: [
                {
                  type: 'urlinput',
                  name: 'source',
                  label: 'Source',
                  filetype: 'file',
                  placeholder: 'Enter file URL or browse...'
                },
                {
                  type: 'input',
                  name: 'description',
                  label: 'Description',
                  placeholder: 'Enter file description...'
                }
              ]
            },
            // Upload Tab
            {
              name: 'uploadpanel',
              title: 'Upload',
              items: [
                {
                  type: 'htmlpanel',
                  html: '<input type="file" name="upload" id="attach-upload" accept="*/*" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;">' +
                        '<div id="attach-upload-note" style="display:none">Uploading: <progress id="attach-upload-progress" max="100" value="0" style="width:100%;height:5px"></progress></div>'
                }
              ]
            }
          ]
        },
        buttons: [
          {
            type: 'cancel',
            text: 'Cancel'
          },
          {
            type: 'submit',
            text: 'Insert',
            primary: true
          }
        ],
        onTabChange: function (api) {
          const dialogEl = document.querySelector('.tox-dialog');
          if(dialogEl) {
            const fileInput = dialogEl.querySelector('#attach-upload');
            if(fileInput) {
              fileInput.addEventListener('change', function(event) {
                const data = api.getData();
                const file = event.target.files[0];
                // If no description provided, use the filename
                if (!data.description) {
                  api.setData({ description: file.name });
                }
                uploadFile(file, api);
              });
            }
          }
        },
        onSubmit: function (api) {
          const data = api.getData();
          
          // Get the file URL from either the source field or upload
          let fileUrl = data.source;
          let description = data.description;
          
          // Validate that we have a URL
          if (!fileUrl) {
            editor.windowManager.alert('Please provide a file URL or upload a file.');
            return;
          }
          
          // Use filename from URL if no description provided
          if (!description && fileUrl) {
            const urlParts = fileUrl.value.split('/');
            description = urlParts[urlParts.length - 1] || 'Download File';
          }
          
          // Insert the link into the editor
          insertFileLink(fileUrl.value, description);
          api.close();
        }, 
        onChange: function (api, details) {
          const data = api.getData();
          
          // Get the file URL from either the source field or upload
          let fileUrl = data.source;
          let description = data.description;

          if (details.name == 'source' && !description && fileUrl) {
            const urlParts = fileUrl.value.split('/');
            description = urlParts[urlParts.length - 1] || 'Download File';
            api.setData({ description: description });
          }
        },
        initialData: {
          source: {value: initialsource},
          description: initialdescription
        }
      };

      // Open the dialog
      editor.windowManager.open(dialogConfig);
    }

    // Add command for programmatic access
    editor.addCommand('mceAttachFile', function () {
      openAttachFileDialog();
    });

    return {
      getMetadata: function () {
        return {
          name: 'Attach File Plugin',
          url: 'https://github.com/your-repo/tinymce-attachfile-plugin'
        };
      }
    };
  });

  // Plugin configuration helper
  //tinymce.PluginManager.requireLangPack(pluginName, 'en');
})();

// Usage Instructions:
/*
To use this plugin:

1. Include this script after TinyMCE:
   <script src="path/to/tinymce-attachfile-plugin.js"></script>

2. Add the plugin to your TinyMCE configuration:
   tinymce.init({
     selector: 'textarea',
     plugins: 'attachfile', // add other plugins as needed
     toolbar: 'attachfile', // add to your toolbar
     
     // File upload configuration (same as images)
     images_upload_url: '/upload', // Your upload endpoint
     images_upload_handler: function(blobInfo, success, failure) {
       // Optional: Custom upload handler
       // This will be used for both images and file attachments
       const formData = new FormData();
       formData.append('file', blobInfo.blob(), blobInfo.filename());
       
       fetch('/upload', {
         method: 'POST',
         body: formData
       })
       .then(response => response.json())
       .then(result => success(result.location))
       .catch(() => failure('Upload failed'));
     },
     
     // Optional additional upload settings
     images_upload_base_path: '/uploads/',
     images_upload_credentials: true,
     
     file_picker_callback: function(callback, value, meta) {
       // Optional: Custom file picker for the General tab
       if (meta.filetype === 'file') {
         // Your custom file picker logic here
         // callback(url, { text: 'description' });
       }
     }
   });

3. Server-side considerations:
   - The plugin uses the same upload endpoint as images
   - Ensure your server can handle file uploads (not just images)
   - Return JSON with 'location' or 'url' property containing the file URL
   - Example response: { "location": "/uploads/document.pdf" }

4. The plugin adds:
   - A toolbar button with link icon
   - A menu item "Attach File"
   - A command "mceAttachFile" for programmatic use

5. Upload behavior:
   - First tries to use images_upload_handler if configured
   - Falls back to images_upload_url with automatic form submission
   - Supports images_upload_credentials and images_upload_base_path settings
   - Shows appropriate error messages if upload fails
*/