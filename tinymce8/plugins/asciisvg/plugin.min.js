/**
 * ASCIIsvg plugin for TinyMCE v8.
 *   port of ASCIIsvg plugin for HTMLArea written by 
 *   David Lippman and Peter Jipsen
 *
 * @author David Lippman
 * @copyright Copyright Â© 2008 David Lippman.
 *
 * Updated for TinyMCE v8
 */

(function() {
    'use strict';

    tinymce.PluginManager.add('asciisvg', function(editor, url) {

        // Process resize function
        function processresize(el) {
            var width = parseInt(el.style.width);
            var height = parseInt(el.style.height);
            if (width > 0 && height > 0) {
                var sscra = decodeURIComponent(el.getAttribute("data-sscr")).split(',');
                sscra[9] = width;
                sscra[10] = height;
                var sscr = sscra.join(',');
                editor.dom.setAttrib(el, "data-sscr", sscr);
                editor.dom.setAttrib(el, "src", editor.getParam('AScgiloc') + '?sscr=' + encodeURIComponent(sscr));
                
                editor.dom.setStyle(el, "width", width + "px");
                editor.dom.setStyle(el, "height", height + "px");
            }
        }

        // Register the command
        editor.addCommand('mceAsciisvg', function() {
            var el = editor.selection.getNode();
            var sscr, isnew, elwidth, elheight, alignm;
            
            if (el.nodeName === 'IMG' && (editor.dom.getAttrib(el, "sscr") !== '' || 
                editor.dom.getAttrib(el, "src").match(/sscr=/) || 
                editor.dom.getAttrib(el, "data-sscr") !== '')) {
                
                sscr = editor.dom.getAttrib(el, "sscr") || editor.dom.getAttrib(el, "data-sscr");
                if (sscr === '') {
                    sscr = editor.dom.getAttrib(el, "src");
                    sscr = decodeURIComponent(sscr.replace(/.*sscr=(.*)/, "$1"));
                }
                isnew = false;
                elwidth = parseInt(editor.dom.getStyle(el, "width")) || 300;
                elheight = parseInt(editor.dom.getStyle(el, "height")) || 200;
                alignm = editor.dom.getStyle(el, "float");
                if (alignm === "none" || !alignm) {
                    alignm = editor.dom.getStyle(el, "vertical-align") || "middle";
                }
            } else {
                isnew = true;
                sscr = "-7.5,7.5,-5,5,1,1,1,1,1,300,200";
                elwidth = 300;
                elheight = 200;
                alignm = "middle";
            }
			// put parameters to pass up in query string
            var dialogUrl = url + '/asciisvgdlg.htm?' + 
                'plugin_url=' + encodeURIComponent(url) +
                '&isnew=' + encodeURIComponent(isnew) +
                '&sscr=' + encodeURIComponent(sscr) +
                '&width=' + encodeURIComponent(elwidth) +
                '&height=' + encodeURIComponent(elheight) +
                '&alignm=' + encodeURIComponent(alignm) +
                '&AScgiloc=' + encodeURIComponent(editor.getParam('AScgiloc') || '');

            editor.windowManager.openUrl({
                title: "Graph Editor",
                url: dialogUrl,
                width: 670,
                height: 510,
				buttons: [
					{
						type: 'cancel',
						text: 'Cancel'
					},
					{
						type: 'custom',
						text: 'Insert',
						buttonType: 'primary'
					}
				],
                onMessage: function(api, data) {
                    // Handle messages from the dialog if needed
                },
                onClose: function() {
                    // Handle dialog close if needed
                },
                onAction: function(api, data) {
                    // Handle dialog actions if needed
					api.sendMessage({'action':'insert'});
                }
            });
        });

		editor.ui.registry.addIcon('graph','<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path style="stroke:black" d="M2 13H22"/><path style="stroke:black" d="M13 2V22"/><path style="stroke:black;fill:none;stroke-width:1.8" d="M5 21C7-23 20 51 20 3"/></svg>');
        // Register asciisvg button
        editor.ui.registry.addMenuItem('asciisvg', {
            text: "Graph",
            icon: 'graph',
            onAction: function() {
                editor.execCommand('mceAsciisvg');
            }
        });

        // Register toggle button for better state management
        editor.ui.registry.addToggleButton('asciisvg', {
            tooltip: "Add/Edit Graph",
            icon: 'graph',
            onAction: function() {
                editor.execCommand('mceAsciisvg');
            },
            onSetup: function(api) {
                var changed = editor.selection.selectorChangedWithUnbind(
                    'img[data-asciisvg], img[sscr]',
                    api.setActive
                );
                return function() {
                    changed.unbind();
                };
            }
        });

        // Handle content processing on save/get
        editor.on('PostProcess', function(o) {
            if (o.get) {
                var imgs = o.content.match(/<img[^>]*(?:sscr|data-sscr)[^>]*>/gi);
                if (imgs !== null) {
                    for (var i = 0; i < imgs.length; i++) {
                        var sscr;
                        if (imgs[i].match(/data-sscr=\"/)) {
                            sscr = imgs[i].replace(/.*data-sscr=\"(.*?)\".*/, "$1");
                        } else if (imgs[i].match(/sscr=\"/)) {
                            sscr = imgs[i].replace(/.*sscr=\"(.*?)\".*/, "$1");
                        } else if (imgs[i].match(/data-sscr=/)) {
                            sscr = imgs[i].replace(/.*data-sscr=(.*?)(\s|\").*/, "$1");
                        } else {
                            sscr = imgs[i].replace(/.*sscr=(.*?)(\s|\").*/, "$1");
                        }
                        
                        var style = '';
                        if (imgs[i].match(/style=\"/)) {
                            style = imgs[i].replace(/.*style=\"(.*?)\".*/, "$1");
                        }
                        
                        var rep = '<embed type="image/svg+xml" style="' + style + '" sscr="' + decodeURIComponent(sscr) + '" />';
                        o.content = o.content.replace(imgs[i], rep);
                    }
                }
            }
        });

        // Handle content processing on load/set
        editor.on('BeforeSetContent', function(o) {
            var imgs = o.content.match(/<embed[^>]*sscr[^>]*>/gi);
            if (imgs !== null) {
                for (var i = 0; i < imgs.length; i++) {
                    var sscr;
                    if (imgs[i].match(/sscr=\"/)) {
                        sscr = imgs[i].replace(/.*sscr=\"(.*?)\".*/, "$1");
                    } else {
                        sscr = imgs[i].replace(/.*sscr=(.*?)\s.*/, "$1");
                    }
                    
                    var style = '';
                    if (imgs[i].match(/style=\"/)) {
                        style = imgs[i].replace(/.*style=\"(.*?)\".*/, "$1");
                    }
                    
                    var AScgiloc = editor.getParam('AScgiloc') || '';
                    var rep = '<img src="' + AScgiloc + '?sscr=' + encodeURIComponent(sscr) + 
                             '" style="' + style + '" data-sscr="' + decodeURIComponent(sscr) + 
                             '" data-asciisvg="1" data-mce-placeholder="1"/>';
                    o.content = o.content.replace(imgs[i], rep);
                }
            }
        });

        // Handle object resize
        editor.on('ObjectResized', function(e) {
            var el = e.target;
            if (el.nodeName === 'IMG' && editor.dom.getAttrib(el, "data-sscr") !== '') {
                setTimeout(function() { 
                    processresize(el);
                }, 50);
            }
        });

        // Return plugin metadata
        return {
            getMetadata: function() {
                return {
                    name: 'ASCIIsvg plugin',
                    url: 'http://dlippman.imathas.com'
                };
            }
        };
    });
})();